plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

repositories { mavenCentral() }

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

/**
 * Let the JavaFX plugin resolve platform-specific artifacts.
 * (Tip: you can remove the manual org.openjfx dependencies below to avoid duplicates.)
 */
javafx {
    version = "21.0.3"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.graphics' ]
}

dependencies {
    // If you keep these, they're fine, but the plugin already supplies them:
    // implementation 'org.openjfx:javafx-controls:21.0.3'
    // implementation 'org.openjfx:javafx-fxml:21.0.3'

    implementation 'org.mindrot:jbcrypt:0.4'
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    implementation 'org.hibernate.orm:hibernate-core:6.4.4.Final'
    implementation 'com.zaxxer:HikariCP:5.1.0'
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.3.3'
    implementation 'org.slf4j:slf4j-simple:2.0.12'
    implementation 'com.fazecast:jSerialComm:2.11.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.24.3'
}

application {
    mainClass = 'app.MainApp'
    applicationDefaultJvmArgs = [
            '--module-path', '$APP_HOME/lib/javafx:$APP_HOME/lib',
            '--add-modules', 'javafx.controls,javafx.fxml'
    ]
}


/** Plain jar manifest (not the fat jar) */
jar {
    manifest { attributes('Main-Class': 'app.MainApp') }
}

/** Keep shadow if you need it; don't minimize with JavaFX */
shadowJar { mergeServiceFiles() }

distributions {
    main {
        contents {
            // Don't duplicate files when we "move" them
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE

            // Rewrite the destination of JavaFX jars from lib/ â†’ lib/javafx/
            eachFile { details ->
                if (details.path.startsWith('lib/')) {
                    // Use the *target* filename (includes version/classifier)
                    def n = details.name
                    if (n ==~ /javafx-(base|graphics|controls|fxml).*\.jar/) {
                        details.path = "lib/javafx/${n}"
                    }
                }
            }
        }
    }
}

/**
 * Make launchers pass the correct module-path in a way that expands APP_HOME
 * reliably on both Unix and Windows scripts.
 */
tasks.named('startScripts') {
    // Put a placeholder that we'll replace AFTER the script files are generated
    defaultJvmOpts = [
            '--module-path', '___APP_HOME___/lib/javafx',
            '--add-modules', 'javafx.controls,javafx.fxml'
    ]

    doLast {
        // Unix script: replace placeholder with $APP_HOME (keeps proper quoting)
        unixScript.text = unixScript.text.replace('___APP_HOME___', '$APP_HOME')

        // Windows script: replace with %APP_HOME%
        windowsScript.text = windowsScript.text.replace('___APP_HOME___', '%APP_HOME%')
    }
}


sourceSets {
    main {
        resources { srcDirs = ['src/main/resources'] }
    }
}
